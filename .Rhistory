x <- tuco.coa$li[, 1] ; y <- tuco.coa$li[, 3]
smoothScatter(x, y, xlab = "F1", ylab = "F3", main = "Le premier plan factoriel")
x <- tuco.coa$li[, 1]
hist(x, col = "lightblue", proba = TRUE, border = grey(0.9),
xlab = "Coordonnée sur le premier facteur", main = "Distribution des 850 gènes")
lines(density(x), lwd = 4)
x <- tuco.coa$co[, 1]
y <- tuco.coa$co[, 2]
coul <- ifelse(substr(colnames(tuco), 3, 3) %in% c("a", "c"), "red", "blue")
plot(x, y, pch = "", xlab = "Premier facteur", ylab = "Deuxième facteur",
main = "Les codons sur le premier plan factoriel")
text(x, y, colnames(tuco), col = coul)
legend("bottomleft", inset = 0.01, col = c("red", "blue"), pch = 19,
legend = c("a ou c en position 3", "g ou t en position 3"))
library(rgl)
library(rgl)
load(url("https://pbil.univ-lyon1.fr/R/donnees/tdr605/card9.Rda"))
library(rgl)
install.packages('rgl')
library("rgl")
library("rgl")
plot3d(card.cr, type = "s", col = couleurs)
leading <- logical(borre$nelem)
for(i in seq(1:borre$nelem)){
print(paste("Traitement de la séquence numéro", i))
annot <- getAnnot(borre$req[[i]], nbl = 8)
if(length(grep("leading", annot)) == 1) leading[i] <- TRUE
}
save(leading, file = "leading.rda")
x <- tuco.coa$li[, 1] ; y <- tuco.coa$li[, 2]
plot(x, y, pch = 19, col = ifelse(leading, "blue", "red"), xlab = "F1",
ylab = "F2", main = "Premier plan factoriel pour les 850 gènes")
legend("topleft", inset = 0.02, legend = c("Gène sur le brin précoce",
"Gène sur le brin tardif"), pch = 19, col = c("blue", "red"))
load(url("http://pbil.univ-lyon1.fr/R/donnees/tdr74/leading.rda"))
x <- tuco.coa$li[, 1] ; y <- tuco.coa$li[, 2]
plot(x, y, pch = 19, col = ifelse(leading, "blue", "red"), xlab = "F1",
ylab = "F2", main = "Premier plan factoriel pour les 850 gènes")
legend("topleft", inset = 0.02, legend = c("Gène sur le brin précoce",
"Gène sur le brin tardif"), pch = 19, col = c("blue", "red"))
tablecode()
barplot(table(leading), las = 1, ylab = "Nombre de gènes",
main = "L'excès de gènes sur le brin précoce",
xlab = "Le gène est sur le brin précoce", col = "lightblue")
rib <- query("rib", "borre et k=@ribosomal@protein@")
ribnames <- getName(rib)
save(ribnames, file = "ribnames.rda")
rib <- query("rib", "borre et k=@ribosomal@protein@")
rib <- query("rib", "borre et k=@ribosomal@protein@")
load(url("http://pbil.univ-lyon1.fr/R/donnees/tdr74/ribnames.rda"))
mescouleurs <- ifelse(rownames(tuco) %in% ribnames, "darkgreen", "transparent")
mespourtours <- ifelse(rownames(tuco) %in% ribnames, "black", grey(0.8))
x <- tuco.coa$li[, 1] ; y <- tuco.coa$li[, 2]
plot(x, y, bg = mescouleurs, pch = 21, xlab = "F1", ylab = "F2", las = 1,
col = mespourtours,
main = "Les gènes fortement exprimés")
legend("topleft", inset = 0.02, legend = "Protéine ribosomale", pch = 21, pt.bg = "darkgreen")
#test du Chi2
tdc <- matrix(c(850 - sum(leading) - 2, sum(leading) - 51,
2, 51), nrow = 2, byrow = TRUE)
colnames(tdc) <- c("Tardif", "Précoce")
rownames(tdc) <- c("Faiblement","Fortement")
tdc
chisq.test(tdc)
mosaicplot(tdc, shade = TRUE)
mosaicplot(tdc, shade = TRUE, main = "Localisation et niveau d'expression des 850 gènes")
y <- tuco.coa$co[, 2]
gccodon <- sapply(colnames(tuco), function(x) round(100*GC(s2c(x))))
boxplot(y~gccodon, col = "lightblue", varwidth = TRUE,
xlab = "Taux de G+C", las = 1, ylab = "F2",
main = "Score des codons sur le deuxième facteur et taux de G+C")
tgc <- numeric(borre$nelem)
for(i in seq(1:borre$nelem)){
print(paste("Calcul du taux de G+C de la séquence numéro", i))
tgc[i] <- GC(getSequence(borre$req[[i]]))
}
save(tgc, file = "tgc.rda")
load(url("http://pbil.univ-lyon1.fr/R/donnees/tdr74/tgc.rda"))
y <- tuco.coa$li[, 2]
smoothScatter(tgc, y, xlab = "Taux de G+C", ylab = "F2", las = 1,
main = "Taux de G+C et deuxième facteur pour 850 gènes")
abline(lm(y~tgc), lwd = 2)
x <- tuco.coa$li[, 3]
dstx <- density(x, adjust = 0.5)
hist(x, col = "lightblue", proba = TRUE, ylim = c(0, max(dstx$y)), border = grey(0.9),
main = "Distribution des 850 gènes sur le troisième facteur", xlab = "F3")
lines(dstx, lwd = 2)
imp <- rownames(tuco)[tuco.coa$li[, 3] > 0.2]
length(imp)
imp[1:10]
writeLines(imp, "imp.txt")
listIMP <- crelistfromclientdata("listIMP", file = "imp.txt", type = "SQ")
impann <- getAnnot(listIMP$req)
data(EXP)
EXP$KD
rtuco <- tuco/rowSums(tuco)
kd <- rtuco %*% EXP$KD
y <- tuco.coa$li[, 3]
smoothScatter(kd, y,
main = "Hydrophobicité des 850 protéines et troisième facteur",
xlab = "Indice de Kyte et Doolittle (GRAVY score)", ylab = "F3", las = 1)
abline(lm(y~kd), lwd = 2)
aaname <- sapply(colnames(tuco), function(x) aaa(translate(s2c(x))))
x <- tuco.coa$co[, 1] ; y <- tuco.coa$co[, 3]
plot(x, y, pch = ".", main = "Le deuxième plan factoriel des codons",
las = 1, xlab = "F1", ylab = "F3")
text(x, y, aaname)
library("rgl")
load(url("https://pbil.univ-lyon1.fr/R/donnees/tdr605/card.Rda"))
couleurs <- ifelse(card$Topt < 50, "blue", "red")
with(card, {
plot(Tmax, Tmin, col = couleurs, pch = 19, las = 1)
abline(lm(Tmin~Tmax))
r2 <- signif(cor(Tmin, Tmax)^2, 3)
title(main = bquote(r^2 == .(r2)))
text(Tmax, Tmin, rownames(card), cex = 0.75, pos = 4, xpd = NA)
})
#correlation entre Tmax et Topt
with(card, {
plot(Tmax, Topt, col = couleurs, pch = 19, las = 1)
abline(lm(Topt~Tmax))
r2 <- signif(cor(Topt, Tmax)^2, 3)
title(main = bquote(r^2 == .(r2)))
text(Tmax, Topt, rownames(card), cex = 0.75, pos = 4, xpd = NA)
})
#correlation entre Tmin et Topt
with(card, {
plot(Topt, Tmin, col = couleurs, pch = 19, las = 1)
abline(lm(Tmin~Topt))
r2 <- signif(cor(Tmin, Topt)^2, 3)
title(main = bquote(r^2 == .(r2)))
text(Topt, Tmin, rownames(card), cex = 0.75, pos = 4, xpd = NA)
})
library(ade4)
par(mfrow = c(1, 2))
card.cr <- as.data.frame(scalewt(card)) # centrage et réduction
stripchart(card, main = "Données de départ", las = 1,
ylab = "Température (°C)", vertical = TRUE, pch = 19, cex = 0.5)
points(1:3, colMeans(card), pch = 21, bg = "purple", cex = 1.5)
stripchart(card.cr, main = "Données centrées-réduites", vertical = TRUE,
pch = 19, cex = 0.5, ylab = "Nombre d'écart-type", las = 1)
points(1:3, colMeans(card.cr), pch = 21, bg = "purple", cex = 1.5)
acp <- dudi.pca(card, center = TRUE, scale = TRUE, scannf = TRUE, nf = 2)
acp <- dudi.pca(card, center = TRUE, scale = TRUE, scannf = FALSE, nf = 2)
acp$eig
acp <- dudi.pca(card, center = TRUE, scale = TRUE, scannf = FALSE)
acp <- dudi.pca(card, center = TRUE, scale = TRUE, scannf = FALSE)
2
acp <- dudi.pca(card, center = TRUE, scale = TRUE, scannf = FALSE)
100*acp$eig/sum(acp$eig)
summary(acp)
x <- acp$li[ , 1] ; y <- acp$li[ , 2]
main <- paste("Le premier plan factoriel\nn =", nrow(card), "micro-organismes")
xlab <- paste("F1 :", signif(100*acp$eig[1]/sum(acp$eig), 3), "%")
ylab <- paste("F2 :", signif(100*acp$eig[2]/sum(acp$eig), 3), "%")
plot(x, y, pch = 19, col = couleurs, asp = 1, las = 1, main = main, xlab = xlab, ylab = ylab)
text(x, y, rownames(card), cex = 0.75, pos = 3)
load(url("https://pbil.univ-lyon1.fr/R/donnees/tdr605/cardGenre.Rda"))
x <- acp$li[ , 1] ; y <- acp$li[ , 2]
main <- paste("Le premier plan factoriel\nn =", nrow(card), "micro-organismes")
xlab <- paste("F1 :", signif(100*acp$eig[1]/sum(acp$eig), 3), "%")
ylab <- paste("F2 :", signif(100*acp$eig[2]/sum(acp$eig), 3), "%")
plot(x, y, pch = 19, col = couleurs, asp = 1, las = 1, main = main, xlab = xlab, ylab = ylab)
text(x, y, rownames(card), cex = 0.75, pos = 3)
selection <- names(table(cardGenre))[table(cardGenre) >= 3] # au moins trois souches
isel <- which(cardGenre %in% selection)
par(bty = "n")
s.class(acp$li[isel, ], cardGenre[isel], clabel = 0.75, add.plot = TRUE, axesell = FALSE)
scatter(acp)
s.corcircle(acp$co)
load(url("https://pbil.univ-lyon1.fr/R/donnees/tdr605/card9.Rda"))
View(card9)
acp9 <- dudi.pca(card9, scannf = FALSE)
acp9$eig
100*acp9$eig/sum(acp9$eig)
summary(acp9)
x <- acp9$li[ , 1] ; y <- acp9$li[ , 2]
main <- paste("Le premier plan factoriel\nn =", nrow(card9), "micro-organismes")
xlab <- paste("F1 :", signif(100*acp9$eig[1]/sum(acp9$eig), 3), "%")
ylab <- paste("F2 :", signif(100*acp9$eig[2]/sum(acp9$eig), 3), "%")
plot(x, y, pch = 19, col = couleurs, asp = 1, las = 1, main = main, xlab = xlab, ylab = ylab)
text(x, y, rownames(card9), cex = 0.75, pos = 3)
tab=read.table("~/Semestre_1/MADG/TP_assemblage/RESULTATS.txt", header = TRUE)
dim(tab)
head(tab)
View(tab)
summary(tab)
hist(tab$Total_contig_size)
summary(tab$Total_contig_size)
tab$coverage=(tab$nreads*150)/tab$Total_contig_size
summary(tab$coverage)
hist(tab$coverage)
plot(tab$Total_contig_size, tab$N50)
anova(lm(tab$N50~tab$coverage+tab$Total_contig_size))
anova(lm(tab$Total_contig_size+tab$N50~tab$coverage))
anova(lm(tab$N50~tab$Total_contig_size+tab$coverage))
par(mfrow=c(2,2))
hist(tab$Complete, xlim=c(0,2675), xlab="", main="Complete")
hist(tab$Complete_Dupli, xlim=c(0,2675), xlab="", main="Complete duplicated")
hist(tab$Fragmented, xlim=c(0,2675), xlab="", main="Fragmented")
hist(tab$Missing, xlim=c(0,2675), xlab="", main="Missing")
plot(tab$Complete,tab$coverage)
(2675-tab$Missing)/2675
plot((2675-tab$Missing)/2675,tab$coverage)
plot((2675-tab$Missing)/2675,tab$coverage, ylim=c(0,1),
plot((2675-tab$Missing)/2675,tab$coverage, ylim=c(0,1),
ylab="proportion de gènes complets ou fragmentés"
plot((2675-tab$Missing)/2675,tab$coverage, ylim=c(0,1),
type="n", xlab="profondeur de sequençage"
ylab="proportion de gènes complets ou fragmentés"
text(label = tab$name,x=tab$coverage, y=2675-tab$Missing)/2675, cex=0.6)
plot((2675-tab$Missing)/2675,tab$coverage, ylim=c(0,1),
type="n", xlab="profondeur de sequençage"
ylab="proportion de gènes complets ou fragmentés"
text(label = tab$name,x=tab$coverage, y=2675-tab$Missing)/2675, cex=0.6)
plot((2675-tab$Missing)/2675,tab$coverage, ylim=c(0,1),
type="n", xlab="profondeur de sequençage"
ylab="proportion de gènes complets ou fragmentés"
text(labels  = tab$name,x=tab$coverage, y=2675-tab$Missing)/2675, cex=0.6)
plot((2675-tab$Missing)/2675,tab$coverage, ylim=c(0,1),
ylab="proportion de gènes complets ou fragmentés"
text(labels  = tab$name, x=tab$coverage, y=(2675-tab$Missing)/2675, cex=0.6)
plot((2675-tab$Missing)/2675,tab$coverage, ylim=c(0,1),
ylab=("proportion de gènes complets ou fragmentés")
text(labels  = tab$name, x=tab$coverage, y=(2675-tab$Missing)/2675, cex=0.6)
plot((2675-tab$Missing)/2675,tab$coverage, ylim=c(0,1),
type="n", xlab="profondeur de sequençage"
ylab="proportion de gènes complets ou fragmentés")
text(labels  = tab$name, x=tab$coverage, y=(2675-tab$Missing)/2675, cex=0.6)
plot((2675-tab$Missing)/2675~tab$coverage, ylim=c(0,1),
type="n", xlab="profondeur de sequençage"
ylab="proportion de gènes complets ou fragmentés")
text(labels  = tab$name, x=tab$coverage, y=(2675-tab$Missing)/2675, cex=0.6)
plot((2675-tab$Missing)/2675~tab$coverage, ylim=c(0,1),
type="n", xlab="profondeur de sequençage",
ylab="proportion de gènes complets ou fragmentés")
text(labels  = tab$name, x=tab$coverage, y=(2675-tab$Missing)/2675, cex=0.6)
plot((2675-tab$Missing)/2675~tab$coverage, ylim=c(0,1),
type="n", xlab="profondeur de sequençage",
ylab="proportion de gènes complets ou fragmentés")
text(labels  = tab$name, x=tab$coverage, y=(2675-tab$Missing)/2675, cex=0.6)
plot(tab$Complete,tab$N50)
anova(lm(tab$Missing~tab$coverage+tab$Total_contig_size))
plot(tab$Complete,tab$Total_contig_size)
plot((2675-tab$Missing)/2675~tab$N50, xlab="N50", ylab="proportion de gene BUSCO complets non manquantes",
ylim=c(0,1), type="n")
text(labels = tab$name,x=tab$N50,y=2675-tab$Missing)/2675, cex=0.6)
text(labels = tab$name,x=tab$N50,y=(2675-tab$Missing)/2675, cex=0.6)
data <- read.table("gencounts.txt",header=TRUE)
data <- read.table("gencounts.txt",header=TRUE)
load("~/Semestre_2/BA/gencounts.txt")
data <- read.table(file = "gencounts.txt",header=TRUE)
pwd
data <- read.table(file = "gencounts.txt",header=TRUE)
data <- read.table("gencounts.txt", header=TRUE)
data <- read.table("gencounts.txt", header=TRUE)
data <- read.table("gencounts.txt", header=TRUE)
source("http://bioconductor.org/biocLite.R")
#if needed : sudo apt-get install -y libcurl4-openssl-dev libxml2-dev (for installing DeSEQ2)
#sudo apt-get install r-cran-rcpp
install.packages("devtools")
source("http://bioconductor.org/biocLite.R")
biocLite("DESeq2")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("edgeR")
library ("edgeR")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("edgeR")
# libraries for plotting results
library("ggplot2")
library("NMF")
install.packages('NMF')
library("NMF")
install.packages('NMF')
library("ggbeeswarm")
library("genefilter")
install.packages('genefilter')
#BiocManager::install("edgeR")
library ("edgeR")
if (!requireNamespace("BiocManager", quietly = TRUE))
install.packages("BiocManager")
BiocManager::install("edgeR")
#BiocManager::install("edgeR")
library ("edgeR")
BiocManager::install("edgeR")
library ("edgeR")
BiocManager::install("DESeq2")
library("DESeq2")
# libraries for plotting results
library("ggplot2")
library("NMF")
library("ggbeeswarm")
library("genefilter")
library("pheatmap")
#BiocManager::install("edgeR")
library ("edgeR")
library("DESeq2")
# libraries for plotting results
library("ggplot2")
library("NMF")
library("ggbeeswarm")
library("genefilter")
library("pheatmap")
library(naniar)
library(tidyr)
library(dplyr)
dta_vege <- read.csv("/home/tommaso/diversite-phylogenetique-de-l-assiette-au-jardin/results/Vegetarian/vegetarian_results.tsv", header=TRUE, sep="\t", fill=T)
summary(dta_vege)
dta_top <- read.csv("/home/tommaso/diversite-phylogenetique-de-l-assiette-au-jardin/results/Top/top_results.tsv", header=TRUE, sep="\t", fill=T)
summary(dta_top)
dta_dessert <- read.csv("/home/tommaso/diversite-phylogenetique-de-l-assiette-au-jardin/results/Dessert/dessert_results.tsv", header=TRUE, sep="\t", fill=T)
summary(dta_dessert)
remove_grams <- function (d) {
d$Dry_matter <- as.numeric(sapply(d$Dry_matter, sub, pattern=" g", replacement=""))
return(d)
}
dta_vege <- remove_grams(dta_vege)
dta_top <- remove_grams(dta_top)
dta_dessert <- remove_grams(dta_dessert)
trim_group_data <- function (d) {
return(
subset(d, Richness > 2) %>% group_by(Recipe)
)
}
vege_by_recipe <- trim_group_data(dta_vege)
top_by_recipe <- trim_group_data(dta_top)
dessert_by_recipe <- trim_group_data(dta_dessert)
summarise_by_mean <- function (d) {
return( d %>% summarise(
Water = mean(x=Water, na.rm = T),
Glucides = weighted.mean(x=Glucides, w=Dry_matter, na.rm = T),
Lipids = weighted.mean(x=Lipids, w=Dry_matter, na.rm = T),
Proteins = weighted.mean(x=Proteins, w=Dry_matter, na.rm = T),
Energy =  weighted.mean(x=Energy, w=Dry_matter, na.rm = T),
Phylogenetic_diversity = mean(Phylogenetic_diversity, na.rm = T),
Weighted_phylogenetic_diversity = mean(Weighted_phylogenetic_diversity, na.rm = T),
Richness = mean(Richness, na.rm = T),
Shannon = mean(Shannon, na.rm = T),
Simpson = mean(Simpson, na.rn = T)
)
)
}
vege_simple <- summarise_by_mean(vege_by_recipe)
vege_simple$type <- "Vegetarian"
top_simple <- summarise_by_mean(top_by_recipe)
top_simple$type <- "Top"
dessert_simple <- summarise_by_mean(dessert_by_recipe)
dessert_simple$type <- "Dessert"
par(mfrow=c(3,1), mar=c(4,3,0,0))
bins <- seq(0, 500, by=50)
hist(vege_simple$Phylogenetic_diversity, ylim=c(0, 15), xlim=c(50, 350), main="", xlab="Vegetarian", col=rgb(0,1,0,0.3), breaks=bins, axes=F)
axis(side=1, at=bins, labels=bins)
axis(side=2, at=c(0,5,10,15), labels=c(0,5,10,15))
hist(top_simple$Phylogenetic_diversity, col=rgb(1, 0, 0, 0.3), ylim=c(0, 15), xlim=c(50, 350), main="", xlab="Top", breaks=bins, axes=F)
axis(side=1, at=bins, labels=bins)
axis(side=2, at=c(0,5,10,15), labels=c(0,5,10,15))
hist(dessert_simple$Phylogenetic_diversity, col=rgb(0, 0, 1, 0.3), ylim=c(0, 15), xlim=c(50, 350), main="", xlab="Desserts", breaks=bins, axes=F)
axis(side=1, at=bins, labels=bins)
axis(side=2, at=c(0,5,10,15), labels=c(0,5,10,15))
par(mfrow=c(3,1), mar=c(4,3,0,0))
bins <- seq(0, 50, by=5)
hist(vege_simple$Weighted_phylogenetic_diversity, ylim=c(0, 15), xlim=c(0, 60), main="", xlab="Vegetarian", col=rgb(0,1,0,0.3), breaks=bins, axes=F)
axis(side=1, at=bins, labels=bins)
axis(side=2, at=c(0,5,10,15), labels=c(0,5,10,15))
hist(top_simple$Weighted_phylogenetic_diversity, col=rgb(1, 0, 0, 0.3), ylim=c(0, 15), xlim=c(0, 60), main="", xlab="Top", breaks=bins, axes=F)
axis(side=1, at=bins, labels=bins)
axis(side=2, at=c(0,5,10,15), labels=c(0,5,10,15))
hist(dessert_simple$Weighted_phylogenetic_diversity, col=rgb(0, 0, 1, 0.3), ylim=c(0, 15), xlim=c(0, 60), main="", xlab="Desserts", breaks=bins, axes=F)
axis(side=1, at=bins, labels=bins)
axis(side=2, at=c(0,5,10,15), labels=c(0,5,10,15))
par(mfrow=c(3,1), mar=c(4,3,0,0))
bins <- seq(0, 20, by=2)
hist(vege_simple$Richness, ylim=c(0, 20), xlim=c(0, 20), main="", xlab="Vegetarian", col=rgb(0,1,0,0.3), breaks=bins, axes=F)
axis(side=1, at=bins, labels=bins)
axis(side=2, at=c(0,10,20), labels=c(0,10,20))
hist(top_simple$Richness, col=rgb(1, 0, 0, 0.3), ylim=c(0, 20), xlim=c(0, 20), main="", xlab="Top", breaks=bins, axes=F)
axis(side=1, at=bins, labels=bins)
axis(side=2, at=c(0,10,20), labels=c(0,10,20))
hist(dessert_simple$Richness, col=rgb(0, 0, 1, 0.3), ylim=c(0, 20), xlim=c(0, 20), main="", xlab="Desserts", breaks=bins, axes=F)
axis(side=1, at=bins, labels=bins)
axis(side=2, at=c(0,10,20), labels=c(0,10,20))
par(mfrow=c(3,1), mar=c(4,3,0,0))
bins <- seq(-10, 5, by=1)
hist(vege_simple$Shannon, ylim=c(0, 20), xlim=c(-10, 5), main="", xlab="Vegetarian", col=rgb(0,1,0,0.3), breaks=bins, axes=F)
axis(side=1, at=bins, labels=bins)
axis(side=2, at=c(0,10,20), labels=c(0,10,20))
hist(top_simple$Shannon, col=rgb(1, 0, 0, 0.3), ylim=c(0, 15), xlim=c(-10, 5), main="", xlab="Top", breaks=bins, axes=F)
axis(side=1, at=bins, labels=bins)
axis(side=2, at=c(0,10,20), labels=c(0,10,20))
hist(dessert_simple$Shannon, col=rgb(0, 0, 1, 0.3), ylim=c(0, 15), xlim=c(-10, 5), main="", xlab="Desserts", breaks=bins, axes=F)
axis(side=1, at=bins, labels=bins)
axis(side=2, at=c(0,10,20), labels=c(0,10,20))
par(mfrow=c(3,1), mar=c(4,3,0,0))
bins <- seq(0, 30, by=2)
hist(vege_simple$Simpson, ylim=c(0, 30), xlim=c(0, 30), main="", xlab="Vegetarian", col=rgb(0,1,0,0.3), breaks=bins, axes=F)
axis(side=1, at=bins, labels=bins)
axis(side=2, at=c(0,10,20,30), labels=c(0,10,20,30))
hist(top_simple$Simpson, col=rgb(1, 0, 0, 0.3), ylim=c(0, 30), xlim=c(0, 30), main="", xlab="Top", breaks=bins, axes=F)
axis(side=1, at=bins, labels=bins)
axis(side=2, at=c(0,10,20,30), labels=c(0,10,20,30))
hist(dessert_simple$Simpson, col=rgb(0, 0, 1, 0.3), ylim=c(0, 30), xlim=c(0, 30), main="", xlab="Desserts", breaks=bins, axes=F)
axis(side=1, at=bins, labels=bins)
axis(side=2, at=c(0,10,20,30), labels=c(0,10,20,30))
par(mfrow=c(1,1), mar=c(4,3,0,0))
boxplot(vege_simple$Phylogenetic_diversity, top_simple$Phylogenetic_diversity, dessert_simple$Phylogenetic_diversity, col=c("green", "red", "blue"), names=c("Vegetarien", "top", "dessert"))
par(mfrow=c(1,1), mar=c(4,3,0,0))
boxplot(vege_simple$Weighted_phylogenetic_diversity, top_simple$Weighted_phylogenetic_diversity, dessert_simple$Weighted_phylogenetic_diversity, col=c("green", "red", "blue"), names=c("Vegetarien", "top", "dessert"))
par(mfrow=c(1,1), mar=c(4,3,0,0))
boxplot(vege_simple$Richness, top_simple$Richness, dessert_simple$Richness, col=c("green", "red", "blue"), names=c("Vegetarien", "top", "dessert"))
par(mfrow=c(1,1), mar=c(4,3,0,0))
boxplot(vege_simple$Shannon, top_simple$Shannon, dessert_simple$Shannon, col=c("green", "red", "blue"), names=c("Vegetarien", "top", "dessert"))
par(mfrow=c(1,1), mar=c(4,3,0,0))
boxplot(vege_simple$Simpson, top_simple$Simpson, dessert_simple$Simpson, col=c("green", "red", "blue"), names=c("Vegetarien", "top", "dessert"))
all_simple <- rbind(vege_simple, top_simple, dessert_simple)
all_simple$type <- as.factor(all_simple$type)
summary(all_simple)
par(mfrow=c(3,2), mar=c(4,3,0,0))
plot(all_simple$Energy, all_simple$Weighted_phylogenetic_diversity, pch=20, col=factor(all_simple$type), main="", xlab="Energy")
abline(lm(all_simple$Weighted_phylogenetic_diversity ~ all_simple$Energy), lty=2, col="grey")
plot(all_simple$Water, all_simple$Weighted_phylogenetic_diversity, pch=20, col=factor(all_simple$type), main="", xlab="Water")
abline(lm(all_simple$Weighted_phylogenetic_diversity ~ all_simple$Glucides), lty=2, col="grey")
plot(all_simple$Glucides, all_simple$Weighted_phylogenetic_diversity, pch=20, col=factor(all_simple$type), main="", xlab="Glucides")
abline(lm(all_simple$Weighted_phylogenetic_diversity ~ all_simple$Lipids), lty=2, col="grey")
plot(all_simple$Proteins, all_simple$Weighted_phylogenetic_diversity, pch=20, col=factor(all_simple$type), ylab="Diversité phylogénétique pondérée", main="", xlab="Proteins")
abline(lm(all_simple$Weighted_phylogenetic_diversity ~ all_simple$Proteins), lty=2, col="grey")
plot(all_simple$Lipids, all_simple$Weighted_phylogenetic_diversity, pch=20, col=factor(all_simple$type), main="", xlab="Lipids")
abline(lm(all_simple$Weighted_phylogenetic_diversity ~ all_simple$Lipids), lty=2, col="grey")
plot.new()
legend(x="bottomright", legend=unique(all_simple$type), fill=c("green", "red", "black"))
cor.test(all_simple$Energy, all_simple$Phylogenetic_diversity)
cor.test(all_simple$Energy, all_simple$Weighted_phylogenetic_diversity)
cor.test(all_simple$Water, all_simple$Phylogenetic_diversity)
cor.test(all_simple$Water, all_simple$Weighted_phylogenetic_diversity)
cor.test(all_simple$Glucides, all_simple$Phylogenetic_diversity)
cor.test(all_simple$Glucides, all_simple$Weighted_phylogenetic_diversity)
cor.test(all_simple$Lipids, all_simple$Phylogenetic_diversity)
cor.test(all_simple$Lipids, all_simple$Weighted_phylogenetic_diversity)
cor.test(all_simple$Proteins, all_simple$Phylogenetic_diversity)
cor.test(all_simple$Proteins, all_simple$Weighted_phylogenetic_diversity)
keep <- subset(all_simple, select=c("Weighted_phylogenetic_diversity", "Energy", "Water", "Glucides", "Lipids", "Proteins"))
plot(keep)
linear_model <- lm(Weighted_phylogenetic_diversity ~Water + Glucides + Proteins + Lipids + Energy + type, data=all_simple)
summary(linear_model)
confint(linear_model, conf.level=0.95)
plot(linear_model$residuals, pch=16, col="red")
plot(linear_model)
linear_model <- lm(Weighted_phylogenetic_diversity ~ type, data=all_simple)
summary(linear_model)
plot(linear_model$residuals)
plot(all_simple$Richness, all_simple$Phylogenetic_diversity, pch=20, col=factor(all_simple$type), ylab="Diversité Phylogénétique", xlab="Richesse"  )
abline(lm(vege_simple$Phylogenetic_diversity ~ vege_simple$Richness), col="green")
abline(lm(top_simple$Phylogenetic_diversity ~ top_simple$Richness), col="red")
abline(lm(dessert_simple$Phylogenetic_diversity ~ dessert_simple$Richness), col="black")
plot(all_simple$Phylogenetic_diversity, all_simple$Weighted_phylogenetic_diversity, pch=20, col=factor(all_simple$type), ylab="Weighted phylogenetic diversity", xlab="Phylogenetic diversity")
abline(lm(vege_simple$Weighted_phylogenetic_diversity ~ vege_simple$Phylogenetic_diversity), col="green")
abline(lm(top_simple$Weighted_phylogenetic_diversity ~ top_simple$Phylogenetic_diversity), col="red")
abline(lm(dessert_simple$Weighted_phylogenetic_diversity ~ dessert_simple$Phylogenetic_diversity), col="black")
plot(all_simple$Richness, all_simple$Weighted_phylogenetic_diversity, pch=20, col=factor(all_simple$type), ylab="Diversité phylogénétique pondérée", xlab="Richesse")
abline(lm(vege_simple$Weighted_phylogenetic_diversity ~ vege_simple$Richness), col="green")
#points(top_simple$Richness, top_simple$Weighted_phylogenetic_diversity, pch=20, col="red" )
abline(lm(top_simple$Weighted_phylogenetic_diversity ~ top_simple$Richness), col="red")
#points(dessert_simple$Richness, dessert_simple$Weighted_phylogenetic_diversity, pch=20, col="blue")
abline(lm(dessert_simple$Weighted_phylogenetic_diversity ~ dessert_simple$Richness), col="black")
plot(vege_simple$Recipe, vege_simple$Weighted_phylogenetic_diversity, las=2)
plot(top_simple$Recipe, top_simple$Weighted_phylogenetic_diversity, las=2)
plot(dessert_simple$Recipe, dessert_simple$Weighted_phylogenetic_diversity, las=2)
plot(all_simple$Weighted_phylogenetic_diversity, col=factor(all_simple$type), ylab="Weighted phylogenetic diversity")
legend(x="bottomright", legend=unique(all_simple$type), fill=c("green", "red", "black"))
cor.test(all_simple$Weighted_phylogenetic_diversity, all_simple$Energy)
cor.test(all_simple$Energy, all_simple$Phylogenetic_diversity)
cor.test(all_simple$Energy, all_simple$Weighted_phylogenetic_diversity)
cor.test(all_simple$Weighted_phylogenetic_diversity, all_simple$Energy)
source('~/M2/Semestre_3/Stat_Bay/S5/test_installation_JAGS.R')
source('~/M2/Semestre_3/Stat_Bay/S5/test_installation_JAGS.R')
source('~/M2/Semestre_3/Stat_Bay/S5/test_installation_JAGS.R')
source('~/M2/Semestre_3/Stat_Bay/S5/test_installation_JAGS.R')
install.packages("rjags")
source('~/M2/Semestre_3/Stat_Bay/S5/test_installation_JAGS.R')
# CHARGEMENT DU PACKAGE
library(rjags)
source('~/M2/Semestre_3/Stat_Bay/S5/test_installation_JAGS.R')
install.packages("rjags")
source('~/M2/Semestre_3/Stat_Bay/S5/test_installation_JAGS.R')
source('~/M2/Semestre_3/Stat_Bay/S5/test_installation_JAGS.R')
source("~/Analyse-experience-d-evolution-experimentale-D.suzukii/analyse_variants/analyse_variants.R")
source("~/Analyse-experience-d-evolution-experimentale-D.suzukii/analyse_variants/analyse_variants.R")
source("~/Analyse-experience-d-evolution-experimentale-D.suzukii/analyse_variants/analyse_variants.R")
source("~/Analyse-experience-d-evolution-experimentale-D.suzukii/analyse_variants/analyse_variants.R")
source("~/Analyse-experience-d-evolution-experimentale-D.suzukii/analyse_variants/analyse_variants.R")
library(tidyverse)
table <- read.table("variants.table",header = T, sep = "\t")
getwd()
setwd("d_suzukii")
ls
getwd()
table$Ce1_1.PL
summary(table)
summary(data)
knitr::opts_chunk$set(echo = TRUE)
library(tidyverse)
data <- read.table("variants_PLI.table",header = T, sep = "\t")
summary(data)
data$Ce1_1.PL
View(data)
data$Ce1_1.PL[1]
data$Ce1_1.PL[3]
vr <- data$Ce1_1.PL[3]
str_split(vr, ",", simplify = TRUE)
dim(str_split(vr, ",", simplify = TRUE))
dim(str_split(vr, ",", simplify = TRUE))[2]
